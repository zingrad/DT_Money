{"version":3,"sources":["assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","services/api.ts","hooks/useTransactions.tsx","components/Summary/index.tsx","components/Dashboard/styles.ts","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/index.tsx","components/NewTransactionModal/style.ts","assets/close.svg","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["Container","styled","header","Content","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","GlobalStyle","createGlobalStyle","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Summary","summary","reduce","acc","deposits","amount","total","withdraws","incomeImg","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","main","TransactionsTable","map","title","category","DateTimeFormat","id","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca7e359e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from \"styled-components\"\r\n\r\n\r\nexport const Container = styled.header`\r\n    background: var(--blue);\r\n`\r\n\r\nexport const Content = styled.div`\r\n     max-width: 1120px;\r\n     margin: 0 auto;\r\n\r\n     padding: 2rem 1rem 12rem;\r\n     display: flex;\r\n     align-items: center;\r\n     justify-content: space-between;\r\n     \r\n\r\n     button{\r\n         font-size: 1rem;\r\n         color:#FFF;\r\n         background: var(--blue-light);\r\n         border: 0;\r\n         padding: 0 2rem;\r\n         border-radius: 0.25rem;\r\n         height: 3rem;\r\n\r\n         transition: filter 0.2s;\r\n\r\n         &:hover{\r\n         filter: brightness(0.9);\r\n     }\r\n         \r\n     }\r\n\r\n     \r\n    \r\n`;\r\n","\r\nimport logoImg from \"../../assets/logo.svg\"\r\n\r\nimport {Container,Content} from \"./styles\"\r\n\r\ninterface HeaderProps{\r\n    onOpenNewTransactionModal: () => void;\r\n}\r\n\r\n\r\nexport function Header( {onOpenNewTransactionModal} : HeaderProps){\r\n   \r\n\r\n\r\n    return(\r\n        <Container>\r\n            <Content>\r\n           <img src={logoImg} alt=\"dt money\" />\r\n           <button type=\"button\" onClick={onOpenNewTransactionModal}>\r\n               Nova transação\r\n           </button>\r\n\r\n           \r\n           </Content>\r\n           </Container>\r\n    )\r\n}","import {createGlobalStyle} from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    :root {\r\n        --background: #f0f2f5;\r\n        --red:#e52e4d;\r\n        --green:#33cc95;\r\n        --blue:#5429cc;\r\n\r\n        --blue-light:#6933ff;\r\n\r\n        --text-title:#363f5f;\r\n        --text-body:#969cb3;\r\n\r\n        --shape:#FFFFFF;\r\n    }\r\n\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n   \r\n\r\n    html{\r\n        @media(max-width: 1080px){\r\n            font-size: 93.75%;\r\n        }\r\n        @media(max-width: 720px){\r\n            font-size: 87.5%;\r\n        }\r\n    }\r\n\r\n    body{\r\n        background: var(---background) ;\r\n        -webkit-font-smoothing: antialised;\r\n    }\r\n\r\n    body, input , textarea, button {\r\n        font-family: \"Poppins\",sans-serif;\r\n        font-weight: 400;\r\n    }\r\n\r\n    h1,h2,h3,h4,h5,h6, strong {\r\n        font-weight: 600;\r\n    }\r\n\r\n    button{\r\n        cursor: pointer;\r\n    }\r\n\r\n    :disabled {\r\n        opacity: 0.6;\r\n        cursor:not-allowed;\r\n    }\r\n    //overlay é a parte de fora do modal\r\n    .react-modal-overlay{\r\n        background: rgba(0,0,0,0.5);\r\n        position: fixed;\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n    .react-modal-content{\r\n        width: 100%;\r\n        max-width: 576px;\r\n\r\n        background: var(--background);\r\n        padding: 3rem;\r\n        position: relative;\r\n        border-radius: 0.25rem;\r\n    }\r\n\r\n    .react-modal-close{\r\n        position: absolute;\r\n        right: 1.5rem;\r\n        top: 1.5rem;\r\n        border: 0;\r\n        background: transparent;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover{\r\n            filter: brightness(0.8);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n    .react-modal-content {\r\n      max-width: 90%;\r\n    }}\r\n    \r\n\r\n\r\n`","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: repeat(3,1fr);\r\ngap: 2rem;\r\nmargin-top: -10rem;\r\n\r\n div{\r\n     background: var(--shape);\r\n     padding: 1.5rem 2rem;\r\n     border-radius: 0.25rem;\r\n     color: var(--text-title);\r\n \r\n \r\n header{\r\n     display: flex;\r\n     align-items: center;\r\n     justify-content: space-between;\r\n }\r\n strong{\r\n     display: block;\r\n     margin-top: 1rem;\r\n     font-size: 2rem;\r\n     font-weight: 500;\r\n     line-height:3rem;\r\n }\r\n//a div que tem a classe hightlight-background recebe as propriedades abaixo\r\n &.highlight-background{\r\nbackground: var(--green);\r\ncolor: #FFF ;\r\n\r\n }\r\n}\r\n\r\n\r\n \r\n`","import axios from \"axios\"\r\n\r\nexport const api = axios.create({\r\n    baseURL: \"http://localhost:3000/api\"\r\n})","import { type } from \"os\";\r\nimport { createContext, useState,useEffect, ReactNode, useContext  } from \"react\"\r\nimport { api } from \"../services/api\";\r\n\r\n\r\ninterface Transaction{\r\n    id:number;\r\n    title:string;\r\n    amount:number;\r\n    type:string;\r\n    category:string;\r\n    createdAt:string;\r\n}\r\n\r\n//forma normal de tipar\r\n// interface TransactionInput{\r\n//     title:string;\r\n//     amount:number;\r\n//     type:string;\r\n//     category:string;\r\n// }\r\n\r\n//dessa forma pega todas as tipagens de Transaction menos ID e CreatedAT\r\ntype TransactionInput = Omit<Transaction,\"id\" | \"createdAt\">\r\n\r\n//dessa forma vai herdar apenas as  tipagens que voce escolher de Transaction\r\n// type Transactioninput = Pick<Transaction,\"title\" | \"amount\" | \"type\" | \"category\">\r\n\r\ninterface TransactionsProviderProps {\r\n    children: ReactNode;\r\n    \r\n}\r\n\r\ninterface TransactionsContextData{\r\n    transactions: Transaction[];\r\n    createTransaction: (Transaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nconst TransactionsContext = createContext<TransactionsContextData>(\r\n    {} as TransactionsContextData // qiando der esse erro de objeto ou array enganar \r\n                                //o Typescript\r\n    \r\n    )\r\n\r\n export function TransactionsProvider({children} : TransactionsProviderProps){\r\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n    useEffect(() => {\r\n        api\r\n          .get(\"transactions\")\r\n          .then((response) => setTransactions(response.data.transactions));\r\n      }, []);\r\n\r\n    async  function createTransaction(transactionInput : TransactionInput){\r\n\r\n       \r\n    const response =  await  api.post('/transactions',{\r\n        ...transactionInput,\r\n        createdAt: new Date()\r\n    })\r\n    const { transaction} = response.data\r\n\r\n    setTransactions([\r\n        ...transactions,\r\n        transaction\r\n    ])\r\n\r\n\r\n      }\r\n\r\n     return(\r\n         <TransactionsContext.Provider value={{transactions, createTransaction }}>\r\n             {children}\r\n         </TransactionsContext.Provider>\r\n     )\r\n}\r\n\r\nexport function useTransactions() {\r\n    const context = useContext(TransactionsContext)\r\n\r\n    return context;\r\n}","import incomeImg from \"../../assets/income.svg\"\r\nimport outcomeImg from \"../../assets/outcome.svg\"\r\nimport totalImg from \"../../assets/total.svg\"\r\nimport { Container } from \"./styles\";\r\nimport {useTransactions} from \"../../hooks/useTransactions\"\r\n\r\n\r\n\r\n\r\nexport function Summary(){\r\n\r\n    const {transactions} = useTransactions()\r\n\r\n    // const totalDeposits = transactions.reduce((acc,transaction)=>{\r\n\r\n    //     if(transaction.type === \"deposit\") {\r\n    //         return acc + transaction.amount\r\n    //     }\r\n\r\n    //         return acc;\r\n\r\n    // }, 0)\r\n\r\n    const summary = transactions.reduce((acc,transaction)=>{\r\n\r\n        if(transaction.type === \"deposit\") {\r\n           acc.deposits += transaction.amount\r\n           acc.total += transaction.amount\r\n        }else{\r\n            acc.withdraws += transaction.amount\r\n            acc.total -= transaction.amount\r\n        }\r\n\r\n        return acc;\r\n\r\n    },{\r\n        deposits:0,\r\n        withdraws: 0,\r\n        total:0,\r\n    })\r\n\r\n\r\n    return(\r\n       <Container>\r\n           <div>\r\n               <header>\r\n                   <p>Entradas</p>\r\n                   <img src={incomeImg} alt=\"Entradas\" />\r\n               </header>\r\n               <strong>{new Intl.NumberFormat(\"pt-BR\",{\r\n                            style: \"currency\",\r\n                            currency:\"BRL\"\r\n                        }).format(summary.deposits)}\r\n                        </strong>\r\n           </div>\r\n\r\n           <div>\r\n               <header>\r\n                   <p>Saídas</p>\r\n                   <img src={outcomeImg} alt=\"Saídas\" />\r\n               </header>\r\n               <strong>-{new Intl.NumberFormat(\"pt-BR\",{\r\n                            style: \"currency\",\r\n                            currency:\"BRL\"\r\n                        }).format(summary.withdraws)}\r\n                        </strong>\r\n           </div>\r\n\r\n           <div className=\"highlight-background\">\r\n               <header>\r\n                   <p>Total</p>\r\n                   <img src={totalImg} alt=\"Total\" />\r\n               </header>\r\n               <strong>\r\n               {new Intl.NumberFormat(\"pt-BR\",{\r\n                            style: \"currency\",\r\n                            currency:\"BRL\"\r\n                        }).format(summary.total)}\r\n                  \r\n               </strong>\r\n           </div>\r\n       </Container>\r\n    );\r\n}","import styled from \"styled-components\"\r\n\r\nexport const Container = styled.main`\r\n\r\nmax-width:1120px;\r\nmargin: 0 auto;\r\npadding: 2.5rem 1rem;\r\n`","import styled from \"styled-components\"\r\n\r\n\r\nexport const Container = styled.div`\r\nmargin-top: 4rem;\r\n\r\n    table{\r\n        width: 100%;\r\n        border-spacing:0 0.5rem;\r\n\r\n        th{\r\n            color: var(--text-body);\r\n            font-weight: 400;\r\n            padding: 1rem 2rem;\r\n            text-align: left;\r\n            line-height: 1.5rem;\r\n        }\r\n\r\n        td{\r\n            padding: 1rem 2rem;\r\n            border: 0;\r\n            background: var(--shape);\r\n            color:var(--text-body);\r\n            border-radius: 0.25rem;\r\n\r\n            &:first-child{\r\n                color: var(--text-title);\r\n            }\r\n\r\n            &.deposit{\r\n                color: var(--green)\r\n            }\r\n\r\n            &.withdraw{\r\n                color: var(--red)\r\n            }\r\n      }\r\n    \r\n    }\r\n`;","import {Container} from \"./styles\";\r\nimport {useTransactions} from \"../../hooks/useTransactions\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function TransactionsTable(){\r\n    const { transactions } = useTransactions()\r\n    \r\n\r\n\r\n    return(\r\n        <Container>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Título</th>\r\n                        <th>Valor</th>\r\n                        <th>Categoria</th>\r\n                        <th>Data</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                   \r\n                   {transactions.map(transaction =>{\r\n                       return(\r\n                        <tr key={transaction.id}>\r\n                        <td>{transaction.title}</td>\r\n                        <td className={transaction.type}>{new Intl.NumberFormat(\"pt-BR\",{\r\n                            style: \"currency\",\r\n                            currency:\"BRL\"\r\n                        }).format(transaction.amount)}</td>\r\n                        <td>{transaction.category}</td>\r\n                        <td>{new Intl.DateTimeFormat(\"pt-BR\").format(\r\n                            new Date (transaction.createdAt)\r\n                        )}</td>\r\n                         </tr>\r\n                       )\r\n                   })}\r\n\r\n                </tbody>\r\n            </table>\r\n        </Container>\r\n    )\r\n\r\n    \r\n}","import React from \"react\";\r\nimport { Summary } from \"../Summary\";\r\nimport {Container} from \"./styles\"\r\nimport {TransactionsTable} from \"../TransactionsTable\"\r\n\r\nexport function Dashboard(){\r\nreturn(\r\n<Container>\r\n    <Summary />\r\n    <TransactionsTable  />\r\n</Container>\r\n);\r\n}","import styled from \"styled-components\"\r\nimport {darken, transparentize} from \"polished\"\r\n\r\nexport const Container = styled.form`\r\n    h2{\r\n        color: var(--text-title);\r\n        font-size: 1.5rem;\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    input{\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        border-radius: 0.25rem;\r\n\r\n        border: 1px solid #d7d7d7;\r\n        background: #e7e9ee;\r\n\r\n        font-weight: 400;\r\n        font-size:  1rem;\r\n       \r\n\r\n        &::placeholder{\r\n            color: var(--text-body);\r\n        }\r\n\r\n        & + input{\r\n            margin-top: 1rem;\r\n        }\r\n\r\n    }\r\n\r\n    button[type=\"submit\"] {\r\n        width: 100%;\r\n        padding:0 1.5rem;\r\n        height: 4rem;\r\n        background: var(--green);\r\n        color: #fff;\r\n        border-radius: 0.25rem;\r\n        border: 0;\r\n        font-size:1rem;\r\n        margin-top: 1.5rem;\r\n        font-weight: 600;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover{\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n  margin: 1rem 0;\r\n display: grid;\r\n grid-template-columns: 1fr 1fr;\r\n gap: 0.5rem;\r\n\r\n`;\r\n\r\n\r\nexport  interface RadioBoxProps{\r\n    isActive:boolean;\r\n    activeColor:\"green\" | \"red\";\r\n}\r\n\r\n\r\n\r\nconst colors ={\r\n    green:\"#33cc95\",\r\n    red:\"#e52e4d\"\r\n};\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n     height: 4rem;\r\n     border: 1px solid #d7d7d7;\r\n     border-radius: 0.25rem;\r\n\r\n     background: ${(props) => props.isActive \r\n     ? transparentize(0.8,colors[props.activeColor])\r\n     : \"transparent\"};\r\n     \r\n     display: flex;\r\n     align-items: center;\r\n     justify-content: center;\r\n\r\n\r\n     transition: border-color 0.2s;\r\n\r\n        &:hover{\r\n        border-color:${darken(0.1,\"#d7d7d7\")};\r\n        }\r\n\r\n     img{\r\n         width: 20px;\r\n         height: 20px;\r\n     }\r\n     span{\r\n         display: inline-block;\r\n         margin-left: 1rem;\r\n         font-size: 1rem;\r\n         color: var(--text-title);\r\n     }\r\n`\r\n\r\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import Modal from \"react-modal\"\r\nimport { Container,TransactionTypeContainer,RadioBox } from \"./style\"\r\nimport closeImg from \"../../assets/close.svg\"\r\nimport incomeImg from \"../../assets/income.svg\"\r\nimport outcomeImg from \"../../assets/outcome.svg\"\r\nimport { FormEvent, useState} from \"react\"\r\nimport {useTransactions} from \"../../hooks/useTransactions\"\r\n\r\n\r\ninterface newTransactionsModalProps{\r\n    isOpen : boolean;\r\n    onRequestClose:() => void;\r\n}\r\n\r\nexport function NewTransactionModal({ isOpen,onRequestClose} : newTransactionsModalProps){\r\n\r\n    const {createTransaction}= useTransactions()\r\n\r\n   const [title,setTitle] = useState(\"\");\r\n   const [amount,setAmount] = useState(0);\r\n   const [category,setCategory] = useState(\"\");\r\n    const [type,setType] = useState(\"deposit\")\r\n\r\n  async  function handleCreateNewTransaction(event: FormEvent){\r\n        event.preventDefault()\r\n\r\n     await   createTransaction({\r\n            title,\r\n            type,\r\n            amount,\r\n            category\r\n        })\r\n\r\n        setTitle(\"\")\r\n        setAmount(0)\r\n        setCategory(\"\")\r\n        setType(\"deposit\")\r\n       \r\n        onRequestClose()\r\n    }\r\n   \r\n    return(\r\n    <Modal\r\n    isOpen={isOpen} \r\n    onRequestClose={onRequestClose}\r\n    overlayClassName=\"react-modal-overlay\"\r\n    className=\"react-modal-content\"\r\n    >\r\n\r\n        <button type=\"button\"\r\n         onClick={onRequestClose}\r\n         className=\"react-modal-close\"\r\n        \r\n         >\r\n\r\n            <img src={closeImg} alt=\"Fechar modal\" />\r\n\r\n         </button>\r\n        <Container onSubmit={handleCreateNewTransaction}>\r\n       <h2>Cadastrar Transação</h2>\r\n\r\n       <input\r\n        placeholder=\"Titulo\"\r\n        value={title}\r\n        onChange={event => setTitle(event.target.value)}\r\n        />\r\n\r\n        <input\r\n        type=\"number\"\r\n        placeholder=\"Valor\"\r\n        value={amount}\r\n        onChange={event => setAmount(Number(event.target.value))}\r\n        />  \r\n\r\n        <TransactionTypeContainer>\r\n        <RadioBox \r\n        \r\n            type=\"button\"\r\n            onClick={()=>{setType(\"deposit\");}}\r\n            isActive={type === \"deposit\"}\r\n            activeColor=\"green\"\r\n           \r\n        >\r\n            <img src={incomeImg}alt=\"Entrada\" />\r\n            <span>Entrada</span>\r\n             </RadioBox>\r\n\r\n             <RadioBox \r\n            type=\"button\"\r\n            onClick={()=>{setType(\"withdraw\");}}\r\n            isActive={type === \"withdraw\"}\r\n            activeColor=\"red\"\r\n        >\r\n            <img src={outcomeImg}alt=\"Saída\" />\r\n            <span>Saída</span>\r\n             </RadioBox>\r\n        </TransactionTypeContainer>\r\n\r\n        <input\r\n        placeholder=\"Categoria\"\r\n        value={category}\r\n        onChange={event => setCategory(event.target.value)}\r\n        />\r\n\r\n        <button type=\"submit\"> cadastrar </button>\r\n       </Container>\r\n      \r\n   </Modal>\r\n    )\r\n}","import { Header } from \"./components/Header\";\nimport {GlobalStyle} from \"./styles/global\"\nimport {Dashboard} from \"./components/Dashboard\"\nimport Modal from \"react-modal\"\nimport { useState } from \"react\";\nimport {NewTransactionModal} from \"./components/NewTransactionModal\"\nimport {TransactionsProvider} from \"./hooks/useTransactions\"\n\n\nModal.setAppElement('#root')\n\nexport function App() {\n\n  const[isNewTransactionModalOpen,setIsNewTransactionModalOpen] = useState(false)\n    \n\n  function handleOpenNewTransactionModal(){\n      setIsNewTransactionModalOpen(true)\n  }\n\n  function handleCloseNewTransactionModal(){\n      setIsNewTransactionModalOpen(false)\n  }\n\n  //O PROVIDER SEMPRE RECEBE UM VALUE\n  return (\n    <TransactionsProvider > \n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n     <Dashboard />\n\n    <NewTransactionModal  isOpen={isNewTransactionModalOpen} onRequestClose={handleCloseNewTransactionModal} />\n\n    <GlobalStyle />\n    \n    </TransactionsProvider>\n  );\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport {createServer,Model } from \"miragejs\"\n\n\ncreateServer({\n\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server){\n    server.db.loadData({\n      transactions: [\n          {\n            id:1,\n            title: \"Freelancer\",\n            type:\"deposit\",\n            category:\"Dev\",\n            amount:6000,\n            createdAt: new Date(\"2021-02-12 09:00:00\"),\n          },\n\n          {\n            id:2,\n            title: \"Energia\",\n            type:\"withdraw\",\n            category:\"casa\",\n            amount:1100,\n            createdAt: new Date(\"2021-02-14 11:00:00\"),\n          },\n      ],\n    })\n  },\n\n  routes(){\n    this.namespace = \"api\"\n\n    this.get(\"/transactions\", ()=>{\n\n      return this.schema.all(\"transaction\")\n\n    })\n\n    this.post(\"transactions\",(schema,request)=> {\n      const data = JSON.parse(request.requestBody)\n\n      return schema.create(\"transaction\",data)\n    })\n\n  }\n})\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}